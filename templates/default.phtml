
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="A layout example that shows off a responsive email layout.">

    <title>Test blog</title>

    <link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.5.0/pure-min.css">
{{ [1, 2, 3, 4]|first }}
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="/combo/1.16.12?/css/layouts/email-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../static/email.css">
        <link rel="stylesheet" href="../static/resets.css">
    <!--<![endif]-->
  
    <!--[if lt IE 9]>
        <script src="http://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7/html5shiv.js"></script>
    <![endif]-->   

</head>
<body>

<div id="layout" class="content pure-g">
    <div id="nav" class="pure-u">
        <a href="#" class="nav-menu-button">Menu</a>

        <div class="nav-inner">
            <button class="primary-button pure-button pure-button-disabled">Customize</button>

            <div class="pure-menu pure-menu-open">
                 <h5 class="pure-menu-heading">Categories</h5>
                <ul>
                    <li><a href="#">All posts <span class="email-count">({{ all_posts|length }})</span></a></li>
                    
                    {% for cat in all_cats %}    
                        
                        <li><a href="#">{{ cat }}</a></li>
                        
                    {% endfor %}
                </ul>
                 <h5 class="pure-menu-heading">Labels</h5>
                <ul>
                    
                    <li><a href="#"><span class="email-label-personal"></span>Personal</a></li>
                    <li><a href="#"><span class="email-label-work"></span>Work</a></li>
                    <li><a href="#"><span class="email-label-travel"></span>Experiment</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div id="list" class="pure-u-1">
        
          {# add a condition:  {{ if each_post|first }} then add a selected class to it else ... #}
        
        {% for each_post in all_posts %}
        <div class="email-item pure-g">
            <div class="pure-u-3-4">
                <h5 class="email-name">{{ each_post.post_author }}</h5>
                <h4 class="email-subject"><button class="primary-button pure-button post-title">{{ each_post.post_title }}<input type="hidden" value="{{ each_post._id }}" /></button></h4>
                <p class="email-desc">
                    {{ each_post.post_descr }}
                </p>
            </div>
        </div>
        {% endfor %}

    </div>

    <div id="main" class="pure-u-1">
        
        
        <!-- loop over template variables here -->
        
        <!--
        * 
        *  posts will have description and category in couchDB entries
        * 
        */
        -->
        
        <div class="email-content">
            <div class="email-content-header pure-g">
                <div class="pure-u-1-2">
                    <h1 class="email-content-title">{{ most_recent.post_title }}</h1>
                    <p class="email-content-subtitle">
                        From <a>{{ most_recent.post_author }}</a> at <span>{{ most_recent.date_published }}</span>
                        
                    </p>
                </div>


            </div>

            <div class="email-content-body">
                <p>{{ most_recent.post_content }}</p>
            </div>
        </div>
        
        
        <!-- loop ends here -->
        
    </div>
</div>

<script src="http://yui.yahooapis.com/3.17.2/build/yui/yui-min.js"></script>

<script>
    YUI().use('node', 'event', 'dump', 'node-base', 'node-event-delegate', 'router', 'io', 'json-parse', function (Y) {

        // HANDLE PAGE RELOAD WHEN YUI ROUTER ALREADY ADDED A ROUTE ...

        var menuButton = Y.one('.nav-menu-button'),
            nav        = Y.one('#nav');
        Y.one('.email-item:first-child').addClass('email-item-selected');
        

        // Setting the active class name expands the menu vertically on small screens.
        menuButton.on('click', function (e) {
            nav.toggleClass('active');
        });



        Y.on('click', function (e) {
            Y.log(this);

            var spost = this.one('input[type="hidden"]').get('value');
            //alert("this is " + spost);



            Y.io('/home/single-post', {
                method: 'POST',
                data: {
                    "single-post" : spost
                },
                on: {

                    // HANDLE POST LOADING ...

                    success: function (id, result) {
                        //Y.log("RAW JSON DATA: " + result.responseText);
                        var message;
                        // Process the JSON data returned from the server
                        try {
                            message = Y.JSON.parse(result.responseText);
                            console.log(message);
                        }
                        catch (e) {
                            alert("JSON Parse failed!");
                            return;
                        }
                        Y.log("PARSED DATA:" + Y.Lang.dump(message));
                        // The returned data was parsed into an array of objects.
                        // Add a P element for each received message
                        /*
                        for (i=0, l=messages.length; i < l; ++i) {
                            html += '<p>' + messages[i].animal + ' says "' +
                                messages[i].message + '"</p>';
                        }
                        */
                        var content_text = Y.one('.email-content-body > p');
                        var title_text = Y.one('.email-content-title');
                        var subtitle_text_link = Y.one('.email-content-subtitle a');
                        var subtitle_text_date = Y.one('.email-content-subtitle span');

                        content_text.empty();
                        content_text.set('text', message.post_content);
                        title_text.empty();
                        title_text.set('text', message.post_title);
                        subtitle_text_link.empty();
                        subtitle_text_link.set('text', message.post_author);
                        subtitle_text_date.empty();
                        subtitle_text_date.set('text', message.date_published);

                        var router = new Y.Router({

                        });

                        router.set('root', '/home/');
                        router.save('/' + message.post_slug);

                    },
                    failure: function (id, result) {
                        console.log("Request error..." +
                            "");
                    }
                }
            });
        }, ".post-title");

    });
</script>


<script>
(function (root) {
// -- Data --
root.YUI_config = {"version":"3.17.2","base":"http:\u002F\u002Fyui.yahooapis.com\u002F3.17.2\u002F","comboBase":"http:\u002F\u002Fyui.yahooapis.com\u002Fcombo?","comboSep":"&","root":"3.17.2\u002F","filter":"min","logLevel":"error","combine":true,"patches":[],"maxURLLength":2048,"groups":{"vendor":{"combine":true,"comboBase":"\u002Fcombo\u002F1.16.12?","base":"\u002F","root":"\u002F","modules":{"css-mediaquery":{"path":"vendor\u002Fcss-mediaquery.js"},"handlebars-runtime":{"path":"vendor\u002Fhandlebars.runtime.js"}}},"app":{"combine":true,"comboBase":"\u002Fcombo\u002F1.16.12?","base":"\u002Fjs\u002F","root":"\u002Fjs\u002F"}}};
root.app || (root.app = {});
root.app.yui = {"use":function () { return this._bootstrap('use', [].slice.call(arguments)); },"require":function () { this._bootstrap('require', [].slice.call(arguments)); },"ready":function (callback) { this.use(function () { callback(); }); },"_bootstrap":function bootstrap(method, args) { var self = this, d = document, head = d.getElementsByTagName('head')[0], ie = /MSIE/.test(navigator.userAgent), callback = [], config = typeof YUI_config != "undefined" ? YUI_config : {}; function flush() { var l = callback.length, i; if (!self.YUI && typeof YUI == "undefined") { throw new Error("YUI was not injected correctly!"); } self.YUI = self.YUI || YUI; for (i = 0; i < l; i++) { callback.shift()(); } } function decrementRequestPending() { self._pending--; if (self._pending <= 0) { setTimeout(flush, 0); } else { load(); } } function createScriptNode(src) { var node = d.createElement('script'); if (node.async) { node.async = false; } if (ie) { node.onreadystatechange = function () { if (/loaded|complete/.test(this.readyState)) { this.onreadystatechange = null; decrementRequestPending(); } }; } else { node.onload = node.onerror = decrementRequestPending; } node.setAttribute('src', src); return node; } function load() { if (!config.seed) { throw new Error('YUI_config.seed array is required.'); } var seed = config.seed, l = seed.length, i, node; if (!self._injected) { self._injected = true; self._pending = seed.length; } for (i = 0; i < l; i++) { node = createScriptNode(seed.shift()); head.appendChild(node); if (node.async !== false) { break; } } } callback.push(function () { var i; if (!self._Y) { self.YUI.Env.core.push.apply(self.YUI.Env.core, config.extendedCore || []); self._Y = self.YUI(); self.use = self._Y.use; if (config.patches && config.patches.length) { for (i = 0; i < config.patches.length; i += 1) { config.patches[i](self._Y, self._Y.Env._loader); } } } self._Y[method].apply(self._Y, args); }); self.YUI = self.YUI || (typeof YUI != "undefined" ? YUI : null); if (!self.YUI && !self._injected) { load(); } else if (self._pending <= 0) { setTimeout(flush, 0); } return this; }};
root.YUI_config || (root.YUI_config = {});
root.YUI_config.seed = ["http:\u002F\u002Fyui.yahooapis.com\u002Fcombo?3.17.2\u002Fyui\u002Fyui-min.js"];
root.YUI_config.groups || (root.YUI_config.groups = {});
root.YUI_config.groups.app || (root.YUI_config.groups.app = {});
root.YUI_config.groups.app.modules = {"start\u002Fapp":{"path":"start\u002Fapp.js","requires":["handlebars-runtime","yui","base-build","router","pjax-base","view","start\u002Fmodels\u002Fgrid","start\u002Fviews\u002Finput","start\u002Fviews\u002Foutput","start\u002Fviews\u002Fdownload"]},"start\u002Fmodels\u002Fgrid":{"path":"start\u002Fmodels\u002Fgrid.js","requires":["yui","querystring","base-build","model","model-sync-rest","start\u002Fmodels\u002Fmq"]},"start\u002Fmodels\u002Fmq":{"path":"start\u002Fmodels\u002Fmq.js","requires":["css-mediaquery","attribute","base-build","model","model-list"]},"start\u002Fviews\u002Fdownload":{"path":"start\u002Fviews\u002Fdownload.js","requires":["yui","base-build","querystring","view"]},"start\u002Fviews\u002Finput":{"path":"start\u002Fviews\u002Finput.js","requires":["base-build","start\u002Fmodels\u002Fmq","start\u002Fviews\u002Ftab"]},"start\u002Fviews\u002Foutput":{"path":"start\u002Fviews\u002Foutput.js","requires":["base-build","escape","start\u002Fviews\u002Ftab"]},"start\u002Fviews\u002Ftab":{"path":"start\u002Fviews\u002Ftab.js","requires":["yui","base-build","view"]}};
}(this));
</script>
<script>
app.yui.use('node-base', 'node-event-delegate', function (Y) {
    // This just makes sure that the href="#" attached to the <a> elements
    // don't scroll you back up the page.
    Y.one('body').delegate('click', function (e) {
        e.preventDefault();
    }, 'a[href="#"]');
});
</script>






</body>
</html>

